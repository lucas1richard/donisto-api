"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _compression = _interopRequireDefault(require("compression"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _lusca = _interopRequireDefault(require("lusca"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _path = _interopRequireDefault(require("path"));

var _expressValidator = _interopRequireDefault(require("express-validator"));

var _api = _interopRequireDefault(require("./routes/api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const app = (0, _express.default)();

// Load environment variables from .env file, where API keys and passwords are configured
_dotenv.default.config({
  path: '.env.example'
}); // Express configuration


app.set('port', process.env.PORT || 3000);
app.set('views', _path.default.join(__dirname, '../views'));
app.set('view engine', 'pug');
app.use((0, _compression.default)());
app.use(_bodyParser.default.json());
app.use(_bodyParser.default.urlencoded({
  extended: true
}));
app.use((0, _expressValidator.default)());
app.use(_lusca.default.xframe('SAMEORIGIN'));
app.use(_lusca.default.xssProtection(true));
app.use((req, res, next) => {
  res.locals.user = req.user;
  next();
});
app.get('/', (req, res) => {
  res.send('Donisto API');
});
app.use('/api', _api.default);
app.use((err, req, res, next) => {
  // eslint-disable-line no-unused-vars
  if (process.env.NODE_ENV !== 'test') {
    console.log(err); // logger.error(err);
  }

  if (err.isJoi) {
    const validationError = {
      validationError: true,
      message: err.details[0].message,
      context: err.details[0].context
    };
    res.status(400).send(validationError);
  } else {
    res.status(500).send(err.message);
  }
});
var _default = app;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiYXBwIiwiZG90ZW52IiwiY29uZmlnIiwicGF0aCIsInNldCIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwiam9pbiIsIl9fZGlybmFtZSIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwibHVzY2EiLCJ4ZnJhbWUiLCJ4c3NQcm90ZWN0aW9uIiwicmVxIiwicmVzIiwibmV4dCIsImxvY2FscyIsInVzZXIiLCJnZXQiLCJzZW5kIiwiYXBpIiwiZXJyIiwiTk9ERV9FTlYiLCJjb25zb2xlIiwibG9nIiwiaXNKb2kiLCJ2YWxpZGF0aW9uRXJyb3IiLCJtZXNzYWdlIiwiZGV0YWlscyIsImNvbnRleHQiLCJzdGF0dXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQVJBLE1BQU1BLEdBQUcsR0FBRyx1QkFBWjs7QUFTQTtBQUNBQyxnQkFBT0MsTUFBUCxDQUFjO0FBQUVDLEVBQUFBLElBQUksRUFBRTtBQUFSLENBQWQsRSxDQUVBOzs7QUFDQUgsR0FBRyxDQUFDSSxHQUFKLENBQVEsTUFBUixFQUFnQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQVosSUFBb0IsSUFBcEM7QUFDQVAsR0FBRyxDQUFDSSxHQUFKLENBQVEsT0FBUixFQUFpQkQsY0FBS0ssSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFVBQXJCLENBQWpCO0FBQ0FULEdBQUcsQ0FBQ0ksR0FBSixDQUFRLGFBQVIsRUFBdUIsS0FBdkI7QUFDQUosR0FBRyxDQUFDVSxHQUFKLENBQVEsMkJBQVI7QUFDQVYsR0FBRyxDQUFDVSxHQUFKLENBQVFDLG9CQUFXQyxJQUFYLEVBQVI7QUFDQVosR0FBRyxDQUFDVSxHQUFKLENBQVFDLG9CQUFXRSxVQUFYLENBQXNCO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQXRCLENBQVI7QUFDQWQsR0FBRyxDQUFDVSxHQUFKLENBQVEsZ0NBQVI7QUFDQVYsR0FBRyxDQUFDVSxHQUFKLENBQVFLLGVBQU1DLE1BQU4sQ0FBYSxZQUFiLENBQVI7QUFDQWhCLEdBQUcsQ0FBQ1UsR0FBSixDQUFRSyxlQUFNRSxhQUFOLENBQW9CLElBQXBCLENBQVI7QUFDQWpCLEdBQUcsQ0FBQ1UsR0FBSixDQUFRLENBQUNRLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEtBQW9CO0FBQzFCRCxFQUFBQSxHQUFHLENBQUNFLE1BQUosQ0FBV0MsSUFBWCxHQUFrQkosR0FBRyxDQUFDSSxJQUF0QjtBQUNBRixFQUFBQSxJQUFJO0FBQ0wsQ0FIRDtBQUtBcEIsR0FBRyxDQUFDdUIsR0FBSixDQUFRLEdBQVIsRUFBYSxDQUFDTCxHQUFELEVBQWVDLEdBQWYsS0FBaUM7QUFDNUNBLEVBQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTLGFBQVQ7QUFDRCxDQUZEO0FBR0F4QixHQUFHLENBQUNVLEdBQUosQ0FBUSxNQUFSLEVBQWdCZSxZQUFoQjtBQUVBekIsR0FBRyxDQUFDVSxHQUFKLENBQVEsQ0FBQ2dCLEdBQUQsRUFBV1IsR0FBWCxFQUF5QkMsR0FBekIsRUFBd0NDLElBQXhDLEtBQStEO0FBQUU7QUFDdkUsTUFBSWYsT0FBTyxDQUFDQyxHQUFSLENBQVlxQixRQUFaLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ25DQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsR0FBWixFQURtQyxDQUVuQztBQUNEOztBQUNELE1BQUlBLEdBQUcsQ0FBQ0ksS0FBUixFQUFlO0FBQ2IsVUFBTUMsZUFBZSxHQUFHO0FBQ3RCQSxNQUFBQSxlQUFlLEVBQUUsSUFESztBQUV0QkMsTUFBQUEsT0FBTyxFQUFFTixHQUFHLENBQUNPLE9BQUosQ0FBWSxDQUFaLEVBQWVELE9BRkY7QUFHdEJFLE1BQUFBLE9BQU8sRUFBRVIsR0FBRyxDQUFDTyxPQUFKLENBQVksQ0FBWixFQUFlQztBQUhGLEtBQXhCO0FBS0FmLElBQUFBLEdBQUcsQ0FBQ2dCLE1BQUosQ0FBVyxHQUFYLEVBQWdCWCxJQUFoQixDQUFxQk8sZUFBckI7QUFDRCxHQVBELE1BT087QUFDTFosSUFBQUEsR0FBRyxDQUFDZ0IsTUFBSixDQUFXLEdBQVgsRUFBZ0JYLElBQWhCLENBQXFCRSxHQUFHLENBQUNNLE9BQXpCO0FBQ0Q7QUFDRixDQWZEO2VBaUJlaEMsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzLCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tICdleHByZXNzJztcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuaW1wb3J0IGNvbXByZXNzaW9uIGZyb20gJ2NvbXByZXNzaW9uJzsgIC8vIGNvbXByZXNzZXMgcmVxdWVzdHNcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCBsdXNjYSBmcm9tICdsdXNjYSc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBleHByZXNzVmFsaWRhdG9yIGZyb20gJ2V4cHJlc3MtdmFsaWRhdG9yJztcbmltcG9ydCBhcGkgZnJvbSAnLi9yb3V0ZXMvYXBpJztcbi8vIExvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gLmVudiBmaWxlLCB3aGVyZSBBUEkga2V5cyBhbmQgcGFzc3dvcmRzIGFyZSBjb25maWd1cmVkXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogJy5lbnYuZXhhbXBsZScgfSk7XG5cbi8vIEV4cHJlc3MgY29uZmlndXJhdGlvblxuYXBwLnNldCgncG9ydCcsIHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCk7XG5hcHAuc2V0KCd2aWV3cycsIHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi92aWV3cycpKTtcbmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ3B1ZycpO1xuYXBwLnVzZShjb21wcmVzc2lvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5hcHAudXNlKGV4cHJlc3NWYWxpZGF0b3IoKSk7XG5hcHAudXNlKGx1c2NhLnhmcmFtZSgnU0FNRU9SSUdJTicpKTtcbmFwcC51c2UobHVzY2EueHNzUHJvdGVjdGlvbih0cnVlKSk7XG5hcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICByZXMubG9jYWxzLnVzZXIgPSByZXEudXNlcjtcbiAgbmV4dCgpO1xufSk7XG5cbmFwcC5nZXQoJy8nLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHJlcy5zZW5kKCdEb25pc3RvIEFQSScpO1xufSk7XG5hcHAudXNlKCcvYXBpJywgYXBpKTtcblxuYXBwLnVzZSgoZXJyOiBhbnksIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHtcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIC8vIGxvZ2dlci5lcnJvcihlcnIpO1xuICB9XG4gIGlmIChlcnIuaXNKb2kpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uRXJyb3IgPSB7XG4gICAgICB2YWxpZGF0aW9uRXJyb3I6IHRydWUsXG4gICAgICBtZXNzYWdlOiBlcnIuZGV0YWlsc1swXS5tZXNzYWdlLFxuICAgICAgY29udGV4dDogZXJyLmRldGFpbHNbMF0uY29udGV4dFxuICAgIH07XG4gICAgcmVzLnN0YXR1cyg0MDApLnNlbmQodmFsaWRhdGlvbkVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnIubWVzc2FnZSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhcHA7XG4iXX0=