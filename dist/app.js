"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _compression = _interopRequireDefault(require("compression"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _lusca = _interopRequireDefault(require("lusca"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _path = _interopRequireDefault(require("path"));

var _expressValidator = _interopRequireDefault(require("express-validator"));

var _api = _interopRequireDefault(require("./routes/api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const app = (0, _express.default)();

// Load environment variables from .env file, where API keys and passwords are configured
_dotenv.default.config({
  path: '.env.example'
}); // Express configuration


app.set('port', process.env.PORT || 3000);
app.set('views', _path.default.join(__dirname, '../views'));
app.set('view engine', 'pug');
app.use((0, _compression.default)());
app.use(_bodyParser.default.json());
app.use(_bodyParser.default.urlencoded({
  extended: true
}));
app.use((0, _expressValidator.default)());
app.use(_lusca.default.xframe('SAMEORIGIN'));
app.use(_lusca.default.xssProtection(true)); // app.use((req, res, next) => {
//   res.locals.user = req.user;
//   next();
// });

app.get('/', (req, res) => {
  res.send('Donisto API');
});
app.use('/api', _api.default);
app.use((err, req, res, next) => {
  // eslint-disable-line no-unused-vars
  if (process.env.NODE_ENV !== 'test') {
    console.log(err); // logger.error(err);
  }

  if (err.isJoi) {
    const validationError = {
      validationError: true,
      message: err.details[0].message,
      context: err.details[0].context
    };
    res.status(400).send(validationError);
  } else {
    res.status(500).send(err.message);
  }
});
var _default = app;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiYXBwIiwiZG90ZW52IiwiY29uZmlnIiwicGF0aCIsInNldCIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwiam9pbiIsIl9fZGlybmFtZSIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwibHVzY2EiLCJ4ZnJhbWUiLCJ4c3NQcm90ZWN0aW9uIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZCIsImFwaSIsImVyciIsIm5leHQiLCJOT0RFX0VOViIsImNvbnNvbGUiLCJsb2ciLCJpc0pvaSIsInZhbGlkYXRpb25FcnJvciIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwiY29udGV4dCIsInN0YXR1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBUkEsTUFBTUEsR0FBRyxHQUFHLHVCQUFaOztBQVNBO0FBQ0FDLGdCQUFPQyxNQUFQLENBQWM7QUFBRUMsRUFBQUEsSUFBSSxFQUFFO0FBQVIsQ0FBZCxFLENBRUE7OztBQUNBSCxHQUFHLENBQUNJLEdBQUosQ0FBUSxNQUFSLEVBQWdCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBWixJQUFvQixJQUFwQztBQUNBUCxHQUFHLENBQUNJLEdBQUosQ0FBUSxPQUFSLEVBQWlCRCxjQUFLSyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsVUFBckIsQ0FBakI7QUFDQVQsR0FBRyxDQUFDSSxHQUFKLENBQVEsYUFBUixFQUF1QixLQUF2QjtBQUNBSixHQUFHLENBQUNVLEdBQUosQ0FBUSwyQkFBUjtBQUNBVixHQUFHLENBQUNVLEdBQUosQ0FBUUMsb0JBQVdDLElBQVgsRUFBUjtBQUNBWixHQUFHLENBQUNVLEdBQUosQ0FBUUMsb0JBQVdFLFVBQVgsQ0FBc0I7QUFBRUMsRUFBQUEsUUFBUSxFQUFFO0FBQVosQ0FBdEIsQ0FBUjtBQUNBZCxHQUFHLENBQUNVLEdBQUosQ0FBUSxnQ0FBUjtBQUNBVixHQUFHLENBQUNVLEdBQUosQ0FBUUssZUFBTUMsTUFBTixDQUFhLFlBQWIsQ0FBUjtBQUNBaEIsR0FBRyxDQUFDVSxHQUFKLENBQVFLLGVBQU1FLGFBQU4sQ0FBb0IsSUFBcEIsQ0FBUixFLENBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFqQixHQUFHLENBQUNrQixHQUFKLENBQVEsR0FBUixFQUFhLENBQUNDLEdBQUQsRUFBZUMsR0FBZixLQUFpQztBQUM1Q0EsRUFBQUEsR0FBRyxDQUFDQyxJQUFKLENBQVMsYUFBVDtBQUNELENBRkQ7QUFHQXJCLEdBQUcsQ0FBQ1UsR0FBSixDQUFRLE1BQVIsRUFBZ0JZLFlBQWhCO0FBRUF0QixHQUFHLENBQUNVLEdBQUosQ0FBUSxDQUFDYSxHQUFELEVBQVdKLEdBQVgsRUFBeUJDLEdBQXpCLEVBQXdDSSxJQUF4QyxLQUErRDtBQUFFO0FBQ3ZFLE1BQUluQixPQUFPLENBQUNDLEdBQVIsQ0FBWW1CLFFBQVosS0FBeUIsTUFBN0IsRUFBcUM7QUFDbkNDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSixHQUFaLEVBRG1DLENBRW5DO0FBQ0Q7O0FBQ0QsTUFBSUEsR0FBRyxDQUFDSyxLQUFSLEVBQWU7QUFDYixVQUFNQyxlQUFlLEdBQUc7QUFDdEJBLE1BQUFBLGVBQWUsRUFBRSxJQURLO0FBRXRCQyxNQUFBQSxPQUFPLEVBQUVQLEdBQUcsQ0FBQ1EsT0FBSixDQUFZLENBQVosRUFBZUQsT0FGRjtBQUd0QkUsTUFBQUEsT0FBTyxFQUFFVCxHQUFHLENBQUNRLE9BQUosQ0FBWSxDQUFaLEVBQWVDO0FBSEYsS0FBeEI7QUFLQVosSUFBQUEsR0FBRyxDQUFDYSxNQUFKLENBQVcsR0FBWCxFQUFnQlosSUFBaEIsQ0FBcUJRLGVBQXJCO0FBQ0QsR0FQRCxNQU9PO0FBQ0xULElBQUFBLEdBQUcsQ0FBQ2EsTUFBSixDQUFXLEdBQVgsRUFBZ0JaLElBQWhCLENBQXFCRSxHQUFHLENBQUNPLE9BQXpCO0FBQ0Q7QUFDRixDQWZEO2VBaUJlOUIsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzLCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tICdleHByZXNzJztcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuaW1wb3J0IGNvbXByZXNzaW9uIGZyb20gJ2NvbXByZXNzaW9uJzsgIC8vIGNvbXByZXNzZXMgcmVxdWVzdHNcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCBsdXNjYSBmcm9tICdsdXNjYSc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBleHByZXNzVmFsaWRhdG9yIGZyb20gJ2V4cHJlc3MtdmFsaWRhdG9yJztcbmltcG9ydCBhcGkgZnJvbSAnLi9yb3V0ZXMvYXBpJztcbi8vIExvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gLmVudiBmaWxlLCB3aGVyZSBBUEkga2V5cyBhbmQgcGFzc3dvcmRzIGFyZSBjb25maWd1cmVkXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogJy5lbnYuZXhhbXBsZScgfSk7XG5cbi8vIEV4cHJlc3MgY29uZmlndXJhdGlvblxuYXBwLnNldCgncG9ydCcsIHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCk7XG5hcHAuc2V0KCd2aWV3cycsIHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi92aWV3cycpKTtcbmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ3B1ZycpO1xuYXBwLnVzZShjb21wcmVzc2lvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5hcHAudXNlKGV4cHJlc3NWYWxpZGF0b3IoKSk7XG5hcHAudXNlKGx1c2NhLnhmcmFtZSgnU0FNRU9SSUdJTicpKTtcbmFwcC51c2UobHVzY2EueHNzUHJvdGVjdGlvbih0cnVlKSk7XG4vLyBhcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuLy8gICByZXMubG9jYWxzLnVzZXIgPSByZXEudXNlcjtcbi8vICAgbmV4dCgpO1xuLy8gfSk7XG5cbmFwcC5nZXQoJy8nLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHJlcy5zZW5kKCdEb25pc3RvIEFQSScpO1xufSk7XG5hcHAudXNlKCcvYXBpJywgYXBpKTtcblxuYXBwLnVzZSgoZXJyOiBhbnksIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHtcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIC8vIGxvZ2dlci5lcnJvcihlcnIpO1xuICB9XG4gIGlmIChlcnIuaXNKb2kpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uRXJyb3IgPSB7XG4gICAgICB2YWxpZGF0aW9uRXJyb3I6IHRydWUsXG4gICAgICBtZXNzYWdlOiBlcnIuZGV0YWlsc1swXS5tZXNzYWdlLFxuICAgICAgY29udGV4dDogZXJyLmRldGFpbHNbMF0uY29udGV4dFxuICAgIH07XG4gICAgcmVzLnN0YXR1cyg0MDApLnNlbmQodmFsaWRhdGlvbkVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnIubWVzc2FnZSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhcHA7XG4iXX0=