"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _compression = _interopRequireDefault(require("compression"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _lusca = _interopRequireDefault(require("lusca"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _path = _interopRequireDefault(require("path"));

var _expressValidator = _interopRequireDefault(require("express-validator"));

var _api = _interopRequireDefault(require("./routes/api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const app = (0, _express.default)();

// Load environment variables from .env file, where API keys and passwords are configured
_dotenv.default.config({
  path: '.env.example'
}); // Express configuration


app.set('port', process.env.PORT || 3000);
app.set('views', _path.default.join(__dirname, '../views'));
app.set('view engine', 'pug');
app.use((0, _compression.default)());
app.use(_bodyParser.default.json());
app.use(_bodyParser.default.urlencoded({
  extended: true
}));
app.use((0, _expressValidator.default)());
app.use(_lusca.default.xframe('SAMEORIGIN'));
app.use(_lusca.default.xssProtection(true));
app.get('/', (req, res) => {
  res.send('Donisto API');
});
app.use('/api', _api.default);
app.use((err, req, res, next) => {
  // eslint-disable-line no-unused-vars
  if (process.env.NODE_ENV !== 'test') {
    console.log(err); // logger.error(err);
  }

  if (err.isJoi) {
    const validationError = {
      validationError: true,
      message: err.details[0].message,
      context: err.details[0].context
    };
    res.status(400).send(validationError);
  } else {
    res.status(500).send(err.message);
  }
});
var _default = app;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiYXBwIiwiZG90ZW52IiwiY29uZmlnIiwicGF0aCIsInNldCIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwiam9pbiIsIl9fZGlybmFtZSIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwibHVzY2EiLCJ4ZnJhbWUiLCJ4c3NQcm90ZWN0aW9uIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZCIsImFwaSIsImVyciIsIm5leHQiLCJOT0RFX0VOViIsImNvbnNvbGUiLCJsb2ciLCJpc0pvaSIsInZhbGlkYXRpb25FcnJvciIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwiY29udGV4dCIsInN0YXR1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBUkEsTUFBTUEsR0FBRyxHQUFHLHVCQUFaOztBQVNBO0FBQ0FDLGdCQUFPQyxNQUFQLENBQWM7QUFBRUMsRUFBQUEsSUFBSSxFQUFFO0FBQVIsQ0FBZCxFLENBRUE7OztBQUNBSCxHQUFHLENBQUNJLEdBQUosQ0FBUSxNQUFSLEVBQWdCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBWixJQUFvQixJQUFwQztBQUNBUCxHQUFHLENBQUNJLEdBQUosQ0FBUSxPQUFSLEVBQWlCRCxjQUFLSyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsVUFBckIsQ0FBakI7QUFDQVQsR0FBRyxDQUFDSSxHQUFKLENBQVEsYUFBUixFQUF1QixLQUF2QjtBQUNBSixHQUFHLENBQUNVLEdBQUosQ0FBUSwyQkFBUjtBQUNBVixHQUFHLENBQUNVLEdBQUosQ0FBUUMsb0JBQVdDLElBQVgsRUFBUjtBQUNBWixHQUFHLENBQUNVLEdBQUosQ0FBUUMsb0JBQVdFLFVBQVgsQ0FBc0I7QUFBRUMsRUFBQUEsUUFBUSxFQUFFO0FBQVosQ0FBdEIsQ0FBUjtBQUNBZCxHQUFHLENBQUNVLEdBQUosQ0FBUSxnQ0FBUjtBQUNBVixHQUFHLENBQUNVLEdBQUosQ0FBUUssZUFBTUMsTUFBTixDQUFhLFlBQWIsQ0FBUjtBQUNBaEIsR0FBRyxDQUFDVSxHQUFKLENBQVFLLGVBQU1FLGFBQU4sQ0FBb0IsSUFBcEIsQ0FBUjtBQUVBakIsR0FBRyxDQUFDa0IsR0FBSixDQUFRLEdBQVIsRUFBYSxDQUFDQyxHQUFELEVBQWVDLEdBQWYsS0FBaUM7QUFDNUNBLEVBQUFBLEdBQUcsQ0FBQ0MsSUFBSixDQUFTLGFBQVQ7QUFDRCxDQUZEO0FBR0FyQixHQUFHLENBQUNVLEdBQUosQ0FBUSxNQUFSLEVBQWdCWSxZQUFoQjtBQUVBdEIsR0FBRyxDQUFDVSxHQUFKLENBQVEsQ0FBQ2EsR0FBRCxFQUFXSixHQUFYLEVBQXlCQyxHQUF6QixFQUF3Q0ksSUFBeEMsS0FBK0Q7QUFBRTtBQUN2RSxNQUFJbkIsT0FBTyxDQUFDQyxHQUFSLENBQVltQixRQUFaLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ25DQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosR0FBWixFQURtQyxDQUVuQztBQUNEOztBQUNELE1BQUlBLEdBQUcsQ0FBQ0ssS0FBUixFQUFlO0FBQ2IsVUFBTUMsZUFBZSxHQUFHO0FBQ3RCQSxNQUFBQSxlQUFlLEVBQUUsSUFESztBQUV0QkMsTUFBQUEsT0FBTyxFQUFFUCxHQUFHLENBQUNRLE9BQUosQ0FBWSxDQUFaLEVBQWVELE9BRkY7QUFHdEJFLE1BQUFBLE9BQU8sRUFBRVQsR0FBRyxDQUFDUSxPQUFKLENBQVksQ0FBWixFQUFlQztBQUhGLEtBQXhCO0FBS0FaLElBQUFBLEdBQUcsQ0FBQ2EsTUFBSixDQUFXLEdBQVgsRUFBZ0JaLElBQWhCLENBQXFCUSxlQUFyQjtBQUNELEdBUEQsTUFPTztBQUNMVCxJQUFBQSxHQUFHLENBQUNhLE1BQUosQ0FBVyxHQUFYLEVBQWdCWixJQUFoQixDQUFxQkUsR0FBRyxDQUFDTyxPQUF6QjtBQUNEO0FBQ0YsQ0FmRDtlQWlCZTlCLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcywgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmltcG9ydCBjb21wcmVzc2lvbiBmcm9tICdjb21wcmVzc2lvbic7ICAvLyBjb21wcmVzc2VzIHJlcXVlc3RzXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgbHVzY2EgZnJvbSAnbHVzY2EnO1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZXhwcmVzc1ZhbGlkYXRvciBmcm9tICdleHByZXNzLXZhbGlkYXRvcic7XG5pbXBvcnQgYXBpIGZyb20gJy4vcm91dGVzL2FwaSc7XG4vLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIC5lbnYgZmlsZSwgd2hlcmUgQVBJIGtleXMgYW5kIHBhc3N3b3JkcyBhcmUgY29uZmlndXJlZFxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuZW52LmV4YW1wbGUnIH0pO1xuXG4vLyBFeHByZXNzIGNvbmZpZ3VyYXRpb25cbmFwcC5zZXQoJ3BvcnQnLCBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDApO1xuYXBwLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vdmlld3MnKSk7XG5hcHAuc2V0KCd2aWV3IGVuZ2luZScsICdwdWcnKTtcbmFwcC51c2UoY29tcHJlc3Npb24oKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuYXBwLnVzZShleHByZXNzVmFsaWRhdG9yKCkpO1xuYXBwLnVzZShsdXNjYS54ZnJhbWUoJ1NBTUVPUklHSU4nKSk7XG5hcHAudXNlKGx1c2NhLnhzc1Byb3RlY3Rpb24odHJ1ZSkpO1xuXG5hcHAuZ2V0KCcvJywgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICByZXMuc2VuZCgnRG9uaXN0byBBUEknKTtcbn0pO1xuYXBwLnVzZSgnL2FwaScsIGFwaSk7XG5cbmFwcC51c2UoKGVycjogYW55LCByZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSB7XG4gICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAvLyBsb2dnZXIuZXJyb3IoZXJyKTtcbiAgfVxuICBpZiAoZXJyLmlzSm9pKSB7XG4gICAgY29uc3QgdmFsaWRhdGlvbkVycm9yID0ge1xuICAgICAgdmFsaWRhdGlvbkVycm9yOiB0cnVlLFxuICAgICAgbWVzc2FnZTogZXJyLmRldGFpbHNbMF0ubWVzc2FnZSxcbiAgICAgIGNvbnRleHQ6IGVyci5kZXRhaWxzWzBdLmNvbnRleHRcbiAgICB9O1xuICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKHZhbGlkYXRpb25FcnJvcik7XG4gIH0gZWxzZSB7XG4gICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoZXJyLm1lc3NhZ2UpO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwO1xuIl19