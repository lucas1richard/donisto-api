"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
const keyWords = ['PRAGMA', 'CREATE', 'EXISTS', 'INTEGER', 'PRIMARY', 'VARCHAR', 'DATETIME', 'NULL', 'REFERENCES', 'AND', 'ASC', 'INDEX_LIST', 'BETWEEN', 'BY', 'CASE', 'CURRENT_DATE', 'CURRENT_TIME', 'DELETE', 'DESC', 'DISTINCT', 'EACH', 'ELSE', 'ELSEIF', 'FALSE', 'FOR', 'FROM', 'GROUP', 'HAVING', 'IF', 'IN', 'INSERT', 'INTERVAL', 'INTO', 'IS', 'JOIN', 'KEY', 'KEYS', 'LEFT', 'LIKE', 'LIMIT', 'MATCH', 'NOT', 'ON', 'OPTION', 'OR', 'ORDER', 'OUT', 'OUTER', 'REPLACE', 'TINYINT', 'RIGHT', 'SELECT', 'SET', 'TABLE', 'THEN', 'TO', 'TRUE', 'UPDATE', 'VALUES', 'WHEN', 'WHERE', 'UNSIGNED', 'CASCADE', 'UNIQUE', 'DEFAULT', 'ENGINE', 'TEXT', 'auto_increment', 'SHOW', 'INDEX', 'ILIKE'];
const indent = '    ';
/* istanbul ignore next */

const logger = query => {
  let output = query;
  output = output.replace(/Executing \(default\): /g, '').replace(/SELECT /g, `SELECT\n${indent}`).replace(/FROM/g, '\nFROM').replace(/ AS /g, ` ${_chalk.default.cyan('as')} `).replace(/ ILIKE /g, ` ${_chalk.default.cyan('ilike')} `).replace(/LEFT OUTER JOIN/g, '\nLEFT OUTER JOIN').replace(/ ON /g, '\n  ON ').replace(/RIGHT OUTER JOIN/g, '\nRIGHT OUTER JOIN').replace(/ WHERE /g, '\nWHERE ').replace(/"(.*?)"/g, _chalk.default.magenta('"$1"')).replace(/, /g, `,\n${indent}`);
  keyWords.forEach(word => {
    const regEx = new RegExp(`\\b${word}\\b`, 'g');
    output = output.replace(regEx, _chalk.default.cyan(word.toLowerCase()));
  });
  console.log(`${output}`);
  console.log(_chalk.default.white('\n========================================================================\n'));
};

module.exports = logger;
var _default = logger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25maWcvZGF0YWJhc2UvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbImtleVdvcmRzIiwiaW5kZW50IiwibG9nZ2VyIiwicXVlcnkiLCJvdXRwdXQiLCJyZXBsYWNlIiwiY2hhbGsiLCJjeWFuIiwibWFnZW50YSIsImZvckVhY2giLCJ3b3JkIiwicmVnRXgiLCJSZWdFeHAiLCJ0b0xvd2VyQ2FzZSIsImNvbnNvbGUiLCJsb2ciLCJ3aGl0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7OztBQURBO0FBR0EsTUFBTUEsUUFBUSxHQUFHLENBQ2YsUUFEZSxFQUNMLFFBREssRUFDSyxRQURMLEVBQ2UsU0FEZixFQUMwQixTQUQxQixFQUNxQyxTQURyQyxFQUVmLFVBRmUsRUFFSCxNQUZHLEVBRUssWUFGTCxFQUVtQixLQUZuQixFQUUwQixLQUYxQixFQUVpQyxZQUZqQyxFQUdmLFNBSGUsRUFHSixJQUhJLEVBR0UsTUFIRixFQUdVLGNBSFYsRUFHMEIsY0FIMUIsRUFHMEMsUUFIMUMsRUFJZixNQUplLEVBSVAsVUFKTyxFQUlLLE1BSkwsRUFJYSxNQUpiLEVBSXFCLFFBSnJCLEVBSStCLE9BSi9CLEVBSXdDLEtBSnhDLEVBSStDLE1BSi9DLEVBS2YsT0FMZSxFQUtOLFFBTE0sRUFLSSxJQUxKLEVBS1UsSUFMVixFQUtnQixRQUxoQixFQUswQixVQUwxQixFQUtzQyxNQUx0QyxFQUs4QyxJQUw5QyxFQU1mLE1BTmUsRUFNUCxLQU5PLEVBTUEsTUFOQSxFQU1RLE1BTlIsRUFNZ0IsTUFOaEIsRUFNd0IsT0FOeEIsRUFNaUMsT0FOakMsRUFNMEMsS0FOMUMsRUFPZixJQVBlLEVBT1QsUUFQUyxFQU9DLElBUEQsRUFPTyxPQVBQLEVBT2dCLEtBUGhCLEVBT3VCLE9BUHZCLEVBT2dDLFNBUGhDLEVBTzJDLFNBUDNDLEVBUWYsT0FSZSxFQVFOLFFBUk0sRUFRSSxLQVJKLEVBUVcsT0FSWCxFQVFvQixNQVJwQixFQVE0QixJQVI1QixFQVFrQyxNQVJsQyxFQVEwQyxRQVIxQyxFQVNmLFFBVGUsRUFTTCxNQVRLLEVBU0csT0FUSCxFQVNZLFVBVFosRUFTd0IsU0FUeEIsRUFTbUMsUUFUbkMsRUFTNkMsU0FUN0MsRUFVZixRQVZlLEVBVUwsTUFWSyxFQVVHLGdCQVZILEVBVXFCLE1BVnJCLEVBVTZCLE9BVjdCLEVBVXNDLE9BVnRDLENBQWpCO0FBaUJBLE1BQU1DLE1BQU0sR0FBRyxNQUFmO0FBRUE7O0FBQ0EsTUFBTUMsTUFBZSxHQUFJQyxLQUFELElBQW1CO0FBQ3pDLE1BQUlDLE1BQU0sR0FBR0QsS0FBYjtBQUNBQyxFQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FDWkMsT0FETSxDQUNFLDBCQURGLEVBQzhCLEVBRDlCLEVBRU5BLE9BRk0sQ0FFRSxVQUZGLEVBRWUsV0FBVUosTUFBTyxFQUZoQyxFQUdOSSxPQUhNLENBR0UsT0FIRixFQUdXLFFBSFgsRUFJTkEsT0FKTSxDQUlFLE9BSkYsRUFJWSxJQUFHQyxlQUFNQyxJQUFOLENBQVcsSUFBWCxDQUFpQixHQUpoQyxFQUtORixPQUxNLENBS0UsVUFMRixFQUtlLElBQUdDLGVBQU1DLElBQU4sQ0FBVyxPQUFYLENBQW9CLEdBTHRDLEVBTU5GLE9BTk0sQ0FNRSxrQkFORixFQU1zQixtQkFOdEIsRUFPTkEsT0FQTSxDQU9FLE9BUEYsRUFPVyxTQVBYLEVBUU5BLE9BUk0sQ0FRRSxtQkFSRixFQVF1QixvQkFSdkIsRUFTTkEsT0FUTSxDQVNFLFVBVEYsRUFTYyxVQVRkLEVBVU5BLE9BVk0sQ0FVRSxVQVZGLEVBVWNDLGVBQU1FLE9BQU4sQ0FBYyxNQUFkLENBVmQsRUFXTkgsT0FYTSxDQVdFLEtBWEYsRUFXVSxNQUFLSixNQUFPLEVBWHRCLENBQVQ7QUFhQUQsRUFBQUEsUUFBUSxDQUFDUyxPQUFULENBQWtCQyxJQUFELElBQVU7QUFDekIsVUFBTUMsS0FBSyxHQUFHLElBQUlDLE1BQUosQ0FBWSxNQUFLRixJQUFLLEtBQXRCLEVBQTRCLEdBQTVCLENBQWQ7QUFDQU4sSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNDLE9BQVAsQ0FBZU0sS0FBZixFQUFzQkwsZUFBTUMsSUFBTixDQUFXRyxJQUFJLENBQUNHLFdBQUwsRUFBWCxDQUF0QixDQUFUO0FBQ0QsR0FIRDtBQUlBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxHQUFFWCxNQUFPLEVBQXRCO0FBQ0FVLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVCxlQUFNVSxLQUFOLENBQVksOEVBQVosQ0FBWjtBQUNELENBckJEOztBQXVCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEIsTUFBakI7ZUFDZUEsTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5cbmNvbnN0IGtleVdvcmRzID0gW1xuICAnUFJBR01BJywgJ0NSRUFURScsICdFWElTVFMnLCAnSU5URUdFUicsICdQUklNQVJZJywgJ1ZBUkNIQVInLFxuICAnREFURVRJTUUnLCAnTlVMTCcsICdSRUZFUkVOQ0VTJywgJ0FORCcsICdBU0MnLCAnSU5ERVhfTElTVCcsXG4gICdCRVRXRUVOJywgJ0JZJywgJ0NBU0UnLCAnQ1VSUkVOVF9EQVRFJywgJ0NVUlJFTlRfVElNRScsICdERUxFVEUnLFxuICAnREVTQycsICdESVNUSU5DVCcsICdFQUNIJywgJ0VMU0UnLCAnRUxTRUlGJywgJ0ZBTFNFJywgJ0ZPUicsICdGUk9NJyxcbiAgJ0dST1VQJywgJ0hBVklORycsICdJRicsICdJTicsICdJTlNFUlQnLCAnSU5URVJWQUwnLCAnSU5UTycsICdJUycsXG4gICdKT0lOJywgJ0tFWScsICdLRVlTJywgJ0xFRlQnLCAnTElLRScsICdMSU1JVCcsICdNQVRDSCcsICdOT1QnLFxuICAnT04nLCAnT1BUSU9OJywgJ09SJywgJ09SREVSJywgJ09VVCcsICdPVVRFUicsICdSRVBMQUNFJywgJ1RJTllJTlQnLFxuICAnUklHSFQnLCAnU0VMRUNUJywgJ1NFVCcsICdUQUJMRScsICdUSEVOJywgJ1RPJywgJ1RSVUUnLCAnVVBEQVRFJyxcbiAgJ1ZBTFVFUycsICdXSEVOJywgJ1dIRVJFJywgJ1VOU0lHTkVEJywgJ0NBU0NBREUnLCAnVU5JUVVFJywgJ0RFRkFVTFQnLFxuICAnRU5HSU5FJywgJ1RFWFQnLCAnYXV0b19pbmNyZW1lbnQnLCAnU0hPVycsICdJTkRFWCcsICdJTElLRSdcbl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxvZ2dlciB7XG4gIChxdWVyeTogc3RyaW5nKTogdm9pZDtcbn1cblxuY29uc3QgaW5kZW50ID0gJyAgICAnO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgbG9nZ2VyOiBJTG9nZ2VyID0gKHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgbGV0IG91dHB1dCA9IHF1ZXJ5O1xuICBvdXRwdXQgPSBvdXRwdXRcbiAgICAucmVwbGFjZSgvRXhlY3V0aW5nIFxcKGRlZmF1bHRcXCk6IC9nLCAnJylcbiAgICAucmVwbGFjZSgvU0VMRUNUIC9nLCBgU0VMRUNUXFxuJHtpbmRlbnR9YClcbiAgICAucmVwbGFjZSgvRlJPTS9nLCAnXFxuRlJPTScpXG4gICAgLnJlcGxhY2UoLyBBUyAvZywgYCAke2NoYWxrLmN5YW4oJ2FzJyl9IGApXG4gICAgLnJlcGxhY2UoLyBJTElLRSAvZywgYCAke2NoYWxrLmN5YW4oJ2lsaWtlJyl9IGApXG4gICAgLnJlcGxhY2UoL0xFRlQgT1VURVIgSk9JTi9nLCAnXFxuTEVGVCBPVVRFUiBKT0lOJylcbiAgICAucmVwbGFjZSgvIE9OIC9nLCAnXFxuICBPTiAnKVxuICAgIC5yZXBsYWNlKC9SSUdIVCBPVVRFUiBKT0lOL2csICdcXG5SSUdIVCBPVVRFUiBKT0lOJylcbiAgICAucmVwbGFjZSgvIFdIRVJFIC9nLCAnXFxuV0hFUkUgJylcbiAgICAucmVwbGFjZSgvXCIoLio/KVwiL2csIGNoYWxrLm1hZ2VudGEoJ1wiJDFcIicpKVxuICAgIC5yZXBsYWNlKC8sIC9nLCBgLFxcbiR7aW5kZW50fWApO1xuXG4gIGtleVdvcmRzLmZvckVhY2goKHdvcmQpID0+IHtcbiAgICBjb25zdCByZWdFeCA9IG5ldyBSZWdFeHAoYFxcXFxiJHt3b3JkfVxcXFxiYCwgJ2cnKTtcbiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShyZWdFeCwgY2hhbGsuY3lhbih3b3JkLnRvTG93ZXJDYXNlKCkpKTtcbiAgfSk7XG4gIGNvbnNvbGUubG9nKGAke291dHB1dH1gKTtcbiAgY29uc29sZS5sb2coY2hhbGsud2hpdGUoJ1xcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbicpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nZ2VyO1xuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyO1xuIl19