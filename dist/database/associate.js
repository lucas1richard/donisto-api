"use strict";

var _Contact = _interopRequireDefault(require("../models/Contact"));

var _Organization = _interopRequireDefault(require("../models/Organization"));

var _Donor = _interopRequireDefault(require("../models/Donor"));

var _NewsFeed = _interopRequireDefault(require("../models/NewsFeed"));

var _foreignKeys = _interopRequireDefault(require("./foreignKeys"));

var _OrganizationsContacts = _interopRequireDefault(require("../models/OrganizationsContacts"));

var _Cause = _interopRequireDefault(require("../models/Cause"));

var _NewsFeedCauses = _interopRequireDefault(require("../models/NewsFeedCauses"));

var _Donation = _interopRequireDefault(require("../models/Donation"));

var _Links = _interopRequireDefault(require("../models/Links"));

var _ContactOrgFollows = _interopRequireDefault(require("../models/ContactOrgFollows"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { if (i % 2) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } else { Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i])); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Organization.hasMany(Contact, {
//   foreignKey: foreignKeys.ORGANIZATION
// });
const org = {
  foreignKey: _foreignKeys.default.ORGANIZATION
};
const donation = {
  foreignKey: _foreignKeys.default.DONATION
};
const contact = {
  foreignKey: _foreignKeys.default.CONTACT
};
const cause = {
  foreignKey: _foreignKeys.default.CAUSE
};
const newsfeed = {
  foreignKey: _foreignKeys.default.NEWSFEED
};
const thruOrgContacts = {
  through: _OrganizationsContacts.default
};
const thruOrgContactsFollows = {
  through: _ContactOrgFollows.default
};
const thruNewsFeedCauses = {
  through: _NewsFeedCauses.default
};

_Contact.default.belongsToMany(_Organization.default, _objectSpread({}, thruOrgContacts, {}, contact));

_Organization.default.belongsToMany(_Contact.default, _objectSpread({}, thruOrgContacts, {}, org));

_Contact.default.belongsToMany(_Organization.default, _objectSpread({}, thruOrgContactsFollows, {}, contact, {
  as: 'scontact'
}));

_Organization.default.belongsToMany(_Contact.default, _objectSpread({}, thruOrgContactsFollows, {}, org, {
  as: 'sorganization'
}));

_Cause.default.belongsToMany(_NewsFeed.default, _objectSpread({}, thruNewsFeedCauses, {}, cause));

_NewsFeed.default.belongsToMany(_Cause.default, _objectSpread({}, thruNewsFeedCauses, {}, newsfeed)); // OrganizationsContacts.hasMany(Organization, {
//   foreignKey: foreignKeys.ORGANIZATION
// });
// OrganizationsContacts.hasMany(Contact, {
//   foreignKey: foreignKeys.CONTACT
// });


_Organization.default.hasMany(_NewsFeed.default, org);

_NewsFeed.default.belongsTo(_Organization.default, org);

_Organization.default.hasMany(_Cause.default, org);

_Cause.default.belongsTo(_Organization.default, org);

_Organization.default.hasMany(_Links.default, org);

_Links.default.belongsTo(_Organization.default, org);

_Contact.default.hasMany(_Donation.default, contact);

_Donation.default.belongsTo(_Contact.default, contact);

_Cause.default.hasMany(_Donation.default, cause);

_Donation.default.belongsTo(_Cause.default, cause);

_Donor.default.belongsTo(_Contact.default, contact);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhYmFzZS9hc3NvY2lhdGUudHMiXSwibmFtZXMiOlsib3JnIiwiZm9yZWlnbktleSIsImZvcmVpZ25LZXlzIiwiT1JHQU5JWkFUSU9OIiwiZG9uYXRpb24iLCJET05BVElPTiIsImNvbnRhY3QiLCJDT05UQUNUIiwiY2F1c2UiLCJDQVVTRSIsIm5ld3NmZWVkIiwiTkVXU0ZFRUQiLCJ0aHJ1T3JnQ29udGFjdHMiLCJ0aHJvdWdoIiwiT3JnYW5pemF0aW9uc0NvbnRhY3RzIiwidGhydU9yZ0NvbnRhY3RzRm9sbG93cyIsIkNvbnRhY3RPcmdGb2xsb3dzIiwidGhydU5ld3NGZWVkQ2F1c2VzIiwiTmV3c0ZlZWRDYXVzZXMiLCJDb250YWN0IiwiYmVsb25nc1RvTWFueSIsIk9yZ2FuaXphdGlvbiIsImFzIiwiQ2F1c2UiLCJOZXdzRmVlZCIsImhhc01hbnkiLCJiZWxvbmdzVG8iLCJMaW5rcyIsIkRvbmF0aW9uIiwiRG9ub3IiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBRUEsTUFBTUEsR0FBRyxHQUFHO0FBQUVDLEVBQUFBLFVBQVUsRUFBRUMscUJBQVlDO0FBQTFCLENBQVo7QUFDQSxNQUFNQyxRQUFRLEdBQUc7QUFBRUgsRUFBQUEsVUFBVSxFQUFFQyxxQkFBWUc7QUFBMUIsQ0FBakI7QUFDQSxNQUFNQyxPQUFPLEdBQUc7QUFBRUwsRUFBQUEsVUFBVSxFQUFFQyxxQkFBWUs7QUFBMUIsQ0FBaEI7QUFDQSxNQUFNQyxLQUFLLEdBQUc7QUFBRVAsRUFBQUEsVUFBVSxFQUFFQyxxQkFBWU87QUFBMUIsQ0FBZDtBQUNBLE1BQU1DLFFBQVEsR0FBRztBQUFFVCxFQUFBQSxVQUFVLEVBQUVDLHFCQUFZUztBQUExQixDQUFqQjtBQUNBLE1BQU1DLGVBQWUsR0FBRztBQUN0QkMsRUFBQUEsT0FBTyxFQUFFQztBQURhLENBQXhCO0FBR0EsTUFBTUMsc0JBQXNCLEdBQUc7QUFDN0JGLEVBQUFBLE9BQU8sRUFBRUc7QUFEb0IsQ0FBL0I7QUFJQSxNQUFNQyxrQkFBa0IsR0FBRztBQUN6QkosRUFBQUEsT0FBTyxFQUFFSztBQURnQixDQUEzQjs7QUFJQUMsaUJBQVFDLGFBQVIsQ0FBc0JDLHFCQUF0QixvQkFBeUNULGVBQXpDLE1BQTZETixPQUE3RDs7QUFDQWUsc0JBQWFELGFBQWIsQ0FBMkJELGdCQUEzQixvQkFBeUNQLGVBQXpDLE1BQTZEWixHQUE3RDs7QUFFQW1CLGlCQUFRQyxhQUFSLENBQXNCQyxxQkFBdEIsb0JBQXlDTixzQkFBekMsTUFBb0VULE9BQXBFO0FBQTZFZ0IsRUFBQUEsRUFBRSxFQUFFO0FBQWpGOztBQUNBRCxzQkFBYUQsYUFBYixDQUEyQkQsZ0JBQTNCLG9CQUF5Q0osc0JBQXpDLE1BQW9FZixHQUFwRTtBQUF5RXNCLEVBQUFBLEVBQUUsRUFBRTtBQUE3RTs7QUFFQUMsZUFBTUgsYUFBTixDQUFvQkksaUJBQXBCLG9CQUFtQ1Asa0JBQW5DLE1BQTBEVCxLQUExRDs7QUFDQWdCLGtCQUFTSixhQUFULENBQXVCRyxjQUF2QixvQkFBbUNOLGtCQUFuQyxNQUEwRFAsUUFBMUQsRyxDQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUFXLHNCQUFhSSxPQUFiLENBQXFCRCxpQkFBckIsRUFBK0J4QixHQUEvQjs7QUFDQXdCLGtCQUFTRSxTQUFULENBQW1CTCxxQkFBbkIsRUFBaUNyQixHQUFqQzs7QUFFQXFCLHNCQUFhSSxPQUFiLENBQXFCRixjQUFyQixFQUE0QnZCLEdBQTVCOztBQUNBdUIsZUFBTUcsU0FBTixDQUFnQkwscUJBQWhCLEVBQThCckIsR0FBOUI7O0FBRUFxQixzQkFBYUksT0FBYixDQUFxQkUsY0FBckIsRUFBNEIzQixHQUE1Qjs7QUFDQTJCLGVBQU1ELFNBQU4sQ0FBZ0JMLHFCQUFoQixFQUE4QnJCLEdBQTlCOztBQUVBbUIsaUJBQVFNLE9BQVIsQ0FBZ0JHLGlCQUFoQixFQUEwQnRCLE9BQTFCOztBQUNBc0Isa0JBQVNGLFNBQVQsQ0FBbUJQLGdCQUFuQixFQUE0QmIsT0FBNUI7O0FBRUFpQixlQUFNRSxPQUFOLENBQWNHLGlCQUFkLEVBQXdCcEIsS0FBeEI7O0FBQ0FvQixrQkFBU0YsU0FBVCxDQUFtQkgsY0FBbkIsRUFBMEJmLEtBQTFCOztBQUVBcUIsZUFBTUgsU0FBTixDQUFnQlAsZ0JBQWhCLEVBQXlCYixPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250YWN0IGZyb20gJ21vZGVscy9Db250YWN0JztcbmltcG9ydCBPcmdhbml6YXRpb24gZnJvbSAnbW9kZWxzL09yZ2FuaXphdGlvbic7XG5pbXBvcnQgRG9ub3IgZnJvbSAnbW9kZWxzL0Rvbm9yJztcbmltcG9ydCBOZXdzRmVlZCBmcm9tICdtb2RlbHMvTmV3c0ZlZWQnO1xuaW1wb3J0IGZvcmVpZ25LZXlzIGZyb20gJy4vZm9yZWlnbktleXMnO1xuaW1wb3J0IE9yZ2FuaXphdGlvbnNDb250YWN0cyBmcm9tICdtb2RlbHMvT3JnYW5pemF0aW9uc0NvbnRhY3RzJztcbmltcG9ydCBDYXVzZSBmcm9tICdtb2RlbHMvQ2F1c2UnO1xuaW1wb3J0IE5ld3NGZWVkQ2F1c2VzIGZyb20gJ21vZGVscy9OZXdzRmVlZENhdXNlcyc7XG5pbXBvcnQgRG9uYXRpb24gZnJvbSAnbW9kZWxzL0RvbmF0aW9uJztcbmltcG9ydCBMaW5rcyBmcm9tICdtb2RlbHMvTGlua3MnO1xuaW1wb3J0IENvbnRhY3RPcmdGb2xsb3dzIGZyb20gJ21vZGVscy9Db250YWN0T3JnRm9sbG93cyc7XG5cbi8vIE9yZ2FuaXphdGlvbi5oYXNNYW55KENvbnRhY3QsIHtcbi8vICAgZm9yZWlnbktleTogZm9yZWlnbktleXMuT1JHQU5JWkFUSU9OXG4vLyB9KTtcblxuY29uc3Qgb3JnID0geyBmb3JlaWduS2V5OiBmb3JlaWduS2V5cy5PUkdBTklaQVRJT04gfTtcbmNvbnN0IGRvbmF0aW9uID0geyBmb3JlaWduS2V5OiBmb3JlaWduS2V5cy5ET05BVElPTiB9O1xuY29uc3QgY29udGFjdCA9IHsgZm9yZWlnbktleTogZm9yZWlnbktleXMuQ09OVEFDVCB9O1xuY29uc3QgY2F1c2UgPSB7IGZvcmVpZ25LZXk6IGZvcmVpZ25LZXlzLkNBVVNFIH07XG5jb25zdCBuZXdzZmVlZCA9IHsgZm9yZWlnbktleTogZm9yZWlnbktleXMuTkVXU0ZFRUQgfTtcbmNvbnN0IHRocnVPcmdDb250YWN0cyA9IHtcbiAgdGhyb3VnaDogT3JnYW5pemF0aW9uc0NvbnRhY3RzXG59O1xuY29uc3QgdGhydU9yZ0NvbnRhY3RzRm9sbG93cyA9IHtcbiAgdGhyb3VnaDogQ29udGFjdE9yZ0ZvbGxvd3Ncbn07XG5cbmNvbnN0IHRocnVOZXdzRmVlZENhdXNlcyA9IHtcbiAgdGhyb3VnaDogTmV3c0ZlZWRDYXVzZXNcbn07XG5cbkNvbnRhY3QuYmVsb25nc1RvTWFueShPcmdhbml6YXRpb24sIHsgLi4udGhydU9yZ0NvbnRhY3RzLCAuLi5jb250YWN0IH0pO1xuT3JnYW5pemF0aW9uLmJlbG9uZ3NUb01hbnkoQ29udGFjdCwgeyAuLi50aHJ1T3JnQ29udGFjdHMsIC4uLm9yZyB9KTtcblxuQ29udGFjdC5iZWxvbmdzVG9NYW55KE9yZ2FuaXphdGlvbiwgeyAuLi50aHJ1T3JnQ29udGFjdHNGb2xsb3dzLCAuLi5jb250YWN0LCBhczogJ3Njb250YWN0JyB9KTtcbk9yZ2FuaXphdGlvbi5iZWxvbmdzVG9NYW55KENvbnRhY3QsIHsgLi4udGhydU9yZ0NvbnRhY3RzRm9sbG93cywgLi4ub3JnLCBhczogJ3Nvcmdhbml6YXRpb24nIH0pO1xuXG5DYXVzZS5iZWxvbmdzVG9NYW55KE5ld3NGZWVkLCB7IC4uLnRocnVOZXdzRmVlZENhdXNlcywgLi4uY2F1c2UgfSk7XG5OZXdzRmVlZC5iZWxvbmdzVG9NYW55KENhdXNlLCB7IC4uLnRocnVOZXdzRmVlZENhdXNlcywgLi4ubmV3c2ZlZWQgfSk7XG5cbi8vIE9yZ2FuaXphdGlvbnNDb250YWN0cy5oYXNNYW55KE9yZ2FuaXphdGlvbiwge1xuLy8gICBmb3JlaWduS2V5OiBmb3JlaWduS2V5cy5PUkdBTklaQVRJT05cbi8vIH0pO1xuXG4vLyBPcmdhbml6YXRpb25zQ29udGFjdHMuaGFzTWFueShDb250YWN0LCB7XG4vLyAgIGZvcmVpZ25LZXk6IGZvcmVpZ25LZXlzLkNPTlRBQ1Rcbi8vIH0pO1xuXG5Pcmdhbml6YXRpb24uaGFzTWFueShOZXdzRmVlZCwgb3JnKTtcbk5ld3NGZWVkLmJlbG9uZ3NUbyhPcmdhbml6YXRpb24sIG9yZyk7XG5cbk9yZ2FuaXphdGlvbi5oYXNNYW55KENhdXNlLCBvcmcpO1xuQ2F1c2UuYmVsb25nc1RvKE9yZ2FuaXphdGlvbiwgb3JnKTtcblxuT3JnYW5pemF0aW9uLmhhc01hbnkoTGlua3MsIG9yZyk7XG5MaW5rcy5iZWxvbmdzVG8oT3JnYW5pemF0aW9uLCBvcmcpO1xuXG5Db250YWN0Lmhhc01hbnkoRG9uYXRpb24sIGNvbnRhY3QpO1xuRG9uYXRpb24uYmVsb25nc1RvKENvbnRhY3QsIGNvbnRhY3QpO1xuXG5DYXVzZS5oYXNNYW55KERvbmF0aW9uLCBjYXVzZSk7XG5Eb25hdGlvbi5iZWxvbmdzVG8oQ2F1c2UsIGNhdXNlKTtcblxuRG9ub3IuYmVsb25nc1RvKENvbnRhY3QsIGNvbnRhY3QpO1xuIl19