"use strict";

module.exports = {
  up: (queryInterface, Sequelize) => {
    return Promise.all([queryInterface.addColumn('contacts', 'city', {
      type: Sequelize.STRING
    }), queryInterface.addColumn('contacts', 'state', {
      type: Sequelize.STRING
    }), queryInterface.addColumn('contacts', 'zip', {
      type: Sequelize.STRING
    })]).catch(err => {
      console.log(err);
    });
  },
  down: queryInterface => {
    return Promise.all([queryInterface.removeColumn('contacts', 'city'), queryInterface.removeColumn('contacts', 'state'), queryInterface.removeColumn('contacts', 'zip')]).catch(err => console.log(err));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWdyYXRpb25zLzIwMTkwMjE3MTgzNjE3LXVwZGF0ZS1jb250YWN0LnRzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1cCIsInF1ZXJ5SW50ZXJmYWNlIiwiU2VxdWVsaXplIiwiUHJvbWlzZSIsImFsbCIsImFkZENvbHVtbiIsInR5cGUiLCJTVFJJTkciLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJkb3duIiwicmVtb3ZlQ29sdW1uIl0sIm1hcHBpbmdzIjoiOztBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsRUFBQUEsRUFBRSxFQUFFLENBQUNDLGNBQUQsRUFBaUNDLFNBQWpDLEtBQTBEO0FBQzVELFdBQU9DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLENBQ2pCSCxjQUFjLENBQUNJLFNBQWYsQ0FBeUIsVUFBekIsRUFBcUMsTUFBckMsRUFBNkM7QUFDM0NDLE1BQUFBLElBQUksRUFBRUosU0FBUyxDQUFDSztBQUQyQixLQUE3QyxDQURpQixFQUlqQk4sY0FBYyxDQUFDSSxTQUFmLENBQXlCLFVBQXpCLEVBQXFDLE9BQXJDLEVBQThDO0FBQzVDQyxNQUFBQSxJQUFJLEVBQUVKLFNBQVMsQ0FBQ0s7QUFENEIsS0FBOUMsQ0FKaUIsRUFPakJOLGNBQWMsQ0FBQ0ksU0FBZixDQUF5QixVQUF6QixFQUFxQyxLQUFyQyxFQUE0QztBQUMxQ0MsTUFBQUEsSUFBSSxFQUFFSixTQUFTLENBQUNLO0FBRDBCLEtBQTVDLENBUGlCLENBQVosRUFVSkMsS0FWSSxDQVVHQyxHQUFELElBQVM7QUFDaEJDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixHQUFaO0FBQ0QsS0FaTSxDQUFQO0FBYUQsR0FmYztBQWdCZkcsRUFBQUEsSUFBSSxFQUFHWCxjQUFELElBQW9DO0FBQ3hDLFdBQU9FLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLENBQ2pCSCxjQUFjLENBQUNZLFlBQWYsQ0FBNEIsVUFBNUIsRUFBd0MsTUFBeEMsQ0FEaUIsRUFFakJaLGNBQWMsQ0FBQ1ksWUFBZixDQUE0QixVQUE1QixFQUF3QyxPQUF4QyxDQUZpQixFQUdqQlosY0FBYyxDQUFDWSxZQUFmLENBQTRCLFVBQTVCLEVBQXdDLEtBQXhDLENBSGlCLENBQVosRUFLTkwsS0FMTSxDQUtBQyxHQUFHLElBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixHQUFaLENBTFAsQ0FBUDtBQU1EO0FBdkJjLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlJbnRlcmZhY2UsIERhdGFUeXBlcyB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1cDogKHF1ZXJ5SW50ZXJmYWNlOiBRdWVyeUludGVyZmFjZSwgU2VxdWVsaXplOiBEYXRhVHlwZXMpID0+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgcXVlcnlJbnRlcmZhY2UuYWRkQ29sdW1uKCdjb250YWN0cycsICdjaXR5Jywge1xuICAgICAgICB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HXG4gICAgICB9KSxcbiAgICAgIHF1ZXJ5SW50ZXJmYWNlLmFkZENvbHVtbignY29udGFjdHMnLCAnc3RhdGUnLCB7XG4gICAgICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkdcbiAgICAgIH0pLFxuICAgICAgcXVlcnlJbnRlcmZhY2UuYWRkQ29sdW1uKCdjb250YWN0cycsICd6aXAnLCB7XG4gICAgICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkdcbiAgICAgIH0pXG4gICAgXSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9KTtcbiAgfSxcbiAgZG93bjogKHF1ZXJ5SW50ZXJmYWNlOiBRdWVyeUludGVyZmFjZSkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICBxdWVyeUludGVyZmFjZS5yZW1vdmVDb2x1bW4oJ2NvbnRhY3RzJywgJ2NpdHknKSxcbiAgICAgIHF1ZXJ5SW50ZXJmYWNlLnJlbW92ZUNvbHVtbignY29udGFjdHMnLCAnc3RhdGUnKSxcbiAgICAgIHF1ZXJ5SW50ZXJmYWNlLnJlbW92ZUNvbHVtbignY29udGFjdHMnLCAnemlwJylcbiAgICBdKVxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gIH1cbn07XG4iXX0=